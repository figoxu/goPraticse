(function () { if (window.WEB_SOCKET_FORCE_FLASH) { } else { if (window.WebSocket) { return } else { if (window.MozWebSocket) { window.WebSocket = MozWebSocket; return } } } var a; if (window.WEB_SOCKET_LOGGER) { a = WEB_SOCKET_LOGGER } else { if (window.console && window.console.log && window.console.error) { a = window.console } else { a = { log: function () { }, error: function () { } } } } if (swfobject.getFlashPlayerVersion().major < 10) { a.error("Flash Player >= 10.0.0 is required."); return } if (location.protocol == "file:") { a.error("WARNING: web-socket-js doesn't work in file:///... URL " + "unless you set Flash Security Settings properly. " + "Open the page via Web server i.e. http://...") } window.WebSocket = function (d, e, c, g, f) { var b = this; b.__id = WebSocket.__nextId++; WebSocket.__instances[b.__id] = b; b.readyState = WebSocket.CONNECTING; b.bufferedAmount = 0; b.__events = {}; if (!e) { e = [] } else { if (typeof e == "string") { e = [e] } } b.__createTask = setTimeout(function () { WebSocket.__addTask(function () { b.__createTask = null; WebSocket.__flash.create(b.__id, d, e, c || null, g || 0, f || null) }) }, 0) }; WebSocket.prototype.send = function (c) { if (this.readyState == WebSocket.CONNECTING) { throw "INVALID_STATE_ERR: Web Socket connection has not been established" } var b = WebSocket.__flash.send(this.__id, encodeURIComponent(c)); if (b < 0) { return true } else { this.bufferedAmount += b; return false } }; WebSocket.prototype.close = function () { if (this.__createTask) { clearTimeout(this.__createTask); this.__createTask = null; this.readyState = WebSocket.CLOSED; return } if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) { return } this.readyState = WebSocket.CLOSING; WebSocket.__flash.close(this.__id) }; WebSocket.prototype.addEventListener = function (c, d, b) { if (!(c in this.__events)) { this.__events[c] = [] } this.__events[c].push(d) }; WebSocket.prototype.removeEventListener = function (e, f, b) { if (!(e in this.__events)) { return } var d = this.__events[e]; for (var c = d.length - 1; c >= 0; --c) { if (d[c] === f) { d.splice(c, 1); break } } }; WebSocket.prototype.dispatchEvent = function (e) { var c = this.__events[e.type] || []; for (var b = 0; b < c.length; ++b) { c[b](e) } var d = this["on" + e.type]; if (d) { d.apply(this, [e]) } }; WebSocket.prototype.__handleEvent = function (d) { if ("readyState" in d) { this.readyState = d.readyState } if ("protocol" in d) { this.protocol = d.protocol } var b; if (d.type == "open" || d.type == "error") { b = this.__createSimpleEvent(d.type) } else { if (d.type == "close") { b = this.__createSimpleEvent("close"); b.wasClean = d.wasClean ? true : false; b.code = d.code; b.reason = d.reason } else { if (d.type == "message") { var c = decodeURIComponent(d.message); b = this.__createMessageEvent("message", c) } else { throw "unknown event type: " + d.type } } } this.dispatchEvent(b) }; WebSocket.prototype.__createSimpleEvent = function (b) { if (document.createEvent && window.Event) { var c = document.createEvent("Event"); c.initEvent(b, false, false); return c } else { return { type: b, bubbles: false, cancelable: false } } }; WebSocket.prototype.__createMessageEvent = function (b, d) { if (window.MessageEvent && typeof (MessageEvent) == "function" && !window.opera) { return new MessageEvent("message", { "view": window, "bubbles": false, "cancelable": false, "data": d }) } else { if (document.createEvent && window.MessageEvent && !window.opera) { var c = document.createEvent("MessageEvent"); c.initMessageEvent("message", false, false, d, null, null, window, null); return c } else { return { type: b, data: d, bubbles: false, cancelable: false } } } }; WebSocket.CONNECTING = 0; WebSocket.OPEN = 1; WebSocket.CLOSING = 2; WebSocket.CLOSED = 3; WebSocket.__isFlashImplementation = true; WebSocket.__initialized = false; WebSocket.__flash = null; WebSocket.__instances = {}; WebSocket.__tasks = []; WebSocket.__nextId = 0; WebSocket.loadFlashPolicyFile = function (b) { WebSocket.__addTask(function () { WebSocket.__flash.loadManualPolicyFile(b) }) }; WebSocket.__initialize = function () { if (WebSocket.__initialized) { return } WebSocket.__initialized = true; if (WebSocket.__swfLocation) { window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation } if (!window.WEB_SOCKET_SWF_LOCATION) { a.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf"); return } if (!window.WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR && !WEB_SOCKET_SWF_LOCATION.match(/(^|\/)WebSocketMainInsecure\.swf(\?.*)?$/) && WEB_SOCKET_SWF_LOCATION.match(/^\w+:\/\/([^\/]+)/)) { var d = RegExp.$1; if (location.host != d) { a.error("[WebSocket] You must host HTML and WebSocketMain.swf in the same host " + "('" + location.host + "' != '" + d + "'). " + "See also 'How to host HTML file and SWF file in different domains' section " + "in README.md. If you use WebSocketMainInsecure.swf, you can suppress this message " + "by WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR = true;") } } var b = document.createElement("div"); b.id = "webSocketContainer"; b.style.position = "absolute"; if (WebSocket.__isFlashLite()) { b.style.left = "0px"; b.style.top = "0px" } else { b.style.left = "-100px"; b.style.top = "-100px" } var c = document.createElement("div"); c.id = "webSocketFlash"; b.appendChild(c); document.body.appendChild(b); swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION, "webSocketFlash", "1", "1", "10.0.0", null, null, { hasPriority: true, swliveconnect: true, allowScriptAccess: "always" }, null, function (f) { if (!f.success) { a.error("[WebSocket] swfobject.embedSWF failed") } }) }; WebSocket.__onFlashInitialized = function () { setTimeout(function () { WebSocket.__flash = document.getElementById("webSocketFlash"); WebSocket.__flash.setCallerUrl(location.href); WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG); for (var b = 0; b < WebSocket.__tasks.length; ++b) { WebSocket.__tasks[b]() } WebSocket.__tasks = [] }, 0) }; WebSocket.__onFlashEvent = function () { setTimeout(function () { try { var c = WebSocket.__flash.receiveEvents(); for (var b = 0; b < c.length; ++b) { WebSocket.__instances[c[b].webSocketId].__handleEvent(c[b]) } } catch (d) { a.error(d) } }, 0); return true }; WebSocket.__log = function (b) { a.log(decodeURIComponent(b)) }; WebSocket.__error = function (b) { a.error(decodeURIComponent(b)) }; WebSocket.__addTask = function (b) { if (WebSocket.__flash) { b() } else { WebSocket.__tasks.push(b) } }; WebSocket.__isFlashLite = function () { if (!window.navigator || !window.navigator.mimeTypes) { return false } var b = window.navigator.mimeTypes["application/x-shockwave-flash"]; if (!b || !b.enabledPlugin || !b.enabledPlugin.filename) { return false } return b.enabledPlugin.filename.match(/flashlite/i) ? true : false }; if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) { swfobject.addDomLoadEvent(function () { WebSocket.__initialize() }) } })();